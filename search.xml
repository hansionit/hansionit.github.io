<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>07.沟通管理</title>
      <link href="/2023/06/02/07.gou-tong-guan-li/"/>
      <url>/2023/06/02/07.gou-tong-guan-li/</url>
      
        <content type="html"><![CDATA[<h6 id="一、项目沟通管理的过程"><a href="#一、项目沟通管理的过程" class="headerlink" title="一、项目沟通管理的过程"></a>一、项目沟通管理的过程</h6><ol><li>制定沟通管理计划</li><li>管理沟通</li><li>控制沟通</li></ol><h6 id="二、制定沟通管理计划的输入、输出、工具和技术"><a href="#二、制定沟通管理计划的输入、输出、工具和技术" class="headerlink" title="二、制定沟通管理计划的输入、输出、工具和技术"></a>二、制定沟通管理计划的输入、输出、工具和技术</h6><p>输入：</p><ul><li>项目管理计划</li><li>干系人登记册</li><li>事业环境因素</li><li>组织过程资产</li></ul><p>工具和技术</p><ul><li>分析沟通需求</li><li>沟通技术</li><li>沟通模型</li><li>沟通方法</li><li>会议</li></ul><p>输出：</p><ul><li>项目沟通管理计划</li><li>项目文件更新</li></ul><h6 id="三、管理沟通的输入、输出、工具和技术"><a href="#三、管理沟通的输入、输出、工具和技术" class="headerlink" title="三、管理沟通的输入、输出、工具和技术"></a>三、管理沟通的输入、输出、工具和技术</h6><p>输入：</p><ul><li>项目沟通管理计划</li><li>工作绩效报告</li><li>事业环境因素</li><li>组织过程资产</li></ul><p>工具和技术：</p><ul><li>沟通技术</li><li>沟通模型</li><li>沟通方法</li><li>信息管理系统</li><li>绩效报告</li></ul><p>输出：</p><ul><li>项目沟通</li><li>项目管理计划更新</li><li>项目文件更新</li><li>组织过程资产更新</li></ul><h6 id="四、控制沟通的输入、输出、工具和技术"><a href="#四、控制沟通的输入、输出、工具和技术" class="headerlink" title="四、控制沟通的输入、输出、工具和技术"></a>四、控制沟通的输入、输出、工具和技术</h6><p>输入：</p><ul><li>项目管理计划</li><li>项目沟通</li><li>问题日志</li><li>工作绩效数据</li><li>组织过程资产</li></ul><p>工具和技术：</p><ul><li>信息管理系统</li><li>专家判断</li><li>会议</li></ul><p>输出：</p><ul><li>工作绩效信息</li><li>变更请求</li><li>项目管理计划更新</li><li>其他项目文件更新</li><li>组织过程资产更新</li></ul><h6 id="五、沟通的方式"><a href="#五、沟通的方式" class="headerlink" title="五、沟通的方式"></a>五、沟通的方式</h6><p>控制程度由弱到强/参与程度由强到弱：</p><ol><li>参与讨论方式</li><li>征询方式</li><li>推销方式（说明）</li><li>叙述方式</li></ol><h6 id="六、沟通的方法"><a href="#六、沟通的方法" class="headerlink" title="六、沟通的方法"></a>六、沟通的方法</h6><ul><li>交互式沟通。在两房或多方之间进行多向信息交换，包括会议、电话、即时通信、视频会议等</li><li>推式沟通。把信息发送给需要接受这些信息的特定接收方，这种方法可以确保信息的发送，但不确保信息送达受众或被目标受众理解。包括：信件、备忘录、报告、电子邮件、传真、语音邮件、日志、新闻稿等。</li><li>拉式沟通。用于信息量很大祸首中很多的情况，要求接收着自主、自行地访问信息内容。包括企业内网、电子在线课程、经验教训数据库、知识库等。</li></ul><h6 id="七、潜在的沟通渠道数量计算公式"><a href="#七、潜在的沟通渠道数量计算公式" class="headerlink" title="七、潜在的沟通渠道数量计算公式"></a>七、潜在的沟通渠道数量计算公式</h6><p>![image-20230420131506866](/Users/hansion/Library/Application Support/typora-user-images/image-20230420131506866.png)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决Mac系统浏览网页提示“您的连接不是私密连接”问题</title>
      <link href="/2023/03/14/jie-jue-mac-xi-tong-liu-lan-wang-ye-ti-shi-nin-de-lian-jie-bu-shi-si-mi-lian-jie-wen-ti/"/>
      <url>/2023/03/14/jie-jue-mac-xi-tong-liu-lan-wang-ye-ti-shi-nin-de-lian-jie-bu-shi-si-mi-lian-jie-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200502000952.png" alt=""></p><blockquote><h1 id="您的连接不是私密连接"><a href="#您的连接不是私密连接" class="headerlink" title="您的连接不是私密连接"></a>您的连接不是私密连接</h1><p>攻击者可能会试图从 <strong><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></strong> 窃取您的信息（例如：密码、通讯内容或信用卡信息）。<a href="chrome-error://chromewebdata/#">了解详情</a></p><p>NET::ERR_CERT_AUTHORITY_INVALID</p></blockquote><p>安装Charles后，Charles的证书未被信任导致的</p><p>打开钥匙串访问，修改Charles的证书为始终信任即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2021/09/28/test/"/>
      <url>/2021/09/28/test/</url>
      
        <content type="html"><![CDATA[<p>仅仅测试一下</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac Os上IDEA配合Tomcat实现Servlet初步访问</title>
      <link href="/2020/07/18/mac-os-shang-idea-pei-he-tomcat-shi-xian-servlet-chu-bu-fang-wen/"/>
      <url>/2020/07/18/mac-os-shang-idea-pei-he-tomcat-shi-xian-servlet-chu-bu-fang-wen/</url>
      
        <content type="html"><![CDATA[<p>JDK和Tomcat的安装可以参考我之前的文章</p><h2 id="创建Servlet项目"><a href="#创建Servlet项目" class="headerlink" title="创建Servlet项目"></a>创建Servlet项目</h2><ol><li>首先新建一个项目，选择Java Enterprise选项中的Web Application</li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717143452.png" alt=""></p><ol start="2"><li>填写项目的名字与路径</li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717143554.png" alt=""></p><ol start="3"><li>在src目录上右键 选择 new -&gt; create new servlet</li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717143706.png" alt=""></p><ol start="4"><li>设置Servlet的类名和包名，点击OK按钮后，会自动创建相应的包和类文件</li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717143815.png" alt=""></p><ol start="5"><li><p>在web.xml中配置servlet的相关信息</p><p>url-pattern的匹配规则如下：</p><p>​    使用‘/’开头，使用‘/’结尾，表示使用路径匹配，比如/foo/bar/*</p><p>​    使用’*.xxx’表示使用后缀匹配；</p><p>​    只使用‘/*’，表示匹配所有的请求；</p><p>​    只使用’/‘，表示是一个默认的Servlet；</p><p>​    除此之外，其他的字符都是准确匹配；</p><p>​    具体可查看<a href="https://blog.csdn.net/wanhongbo029/article/details/85612152" target="_blank" rel="noopener">Servlet配置中servlet-mapping的配置问题</a></p><p>此处以准确匹配/login为例</p></li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717145526.png" alt=""></p><pre><code>         &lt;servlet&gt;        &lt;servlet-name&gt;ServletTest&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.hansion.ServletTest&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;ServletTest&lt;/servlet-name&gt;        &lt;url-pattern&gt;/login&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;</code></pre><h2 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h2><ol><li>点击上方<code>Run</code>-&gt;<code>Edit Configurations...</code></li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717144134.png" alt=""></p><ol start="2"><li><p>点击左上角加号，选择<code>Tomcat Server</code> -&gt; <code>local</code></p><p>点击右侧<code>Configure...</code>按钮选择本机安装Tomcat的路径后点击确定</p><p>可以根据自己的需要更改<code>HTTP port</code>和<code>AJP port</code></p></li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717144357.png" alt=""></p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717144446.png" alt=""></p><ol start="3"><li>在项目上右键，点击<code>Open Module Settings</code></li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717144632.png" alt=""></p><ol start="4"><li>在<code>Modules</code>中点击加号，选择<code>Library...</code></li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717144734.png" alt=""></p><ol start="5"><li>选择指定的Tomcat后，点击<code>Add Selected</code>按钮添加</li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717144802.png" alt=""></p><ol start="6"><li>勾选刚才添加的library</li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717144826.png" alt=""></p><ol start="7"><li><p>点击上方<code>Run</code>-&gt;<code>Edit Configurations...</code> 进入<code>Deployment</code>选项卡，查看下方<code>Application context</code>的值</p><p>如果找不到<code>Application context</code>，附近应该有个<code>fix</code>按钮，点击即可显示</p></li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200717150806.png" alt=""></p><ol start="8"><li><p>点击绿三角按钮运行，默认会自动打开浏览器访问<a href="http://localhost:xxxx/">http://localhost:xxxx/</a></p><p>需要加上<code>Application context</code>和想要访问的<code>url-pattern</code>，如：<a href="http://localhost:9898/MyServletTest_war_exploded/login" target="_blank" rel="noopener">http://localhost:9898/MyServletTest_war_exploded/login</a></p><p>此时会调用<code>doGet</code>方法可以增加输出代码验证</p><pre><code>System.out.println("doGet");</code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Mac插入移动硬盘不显示 磁盘工具显示未装载状态的问题</title>
      <link href="/2020/07/18/jie-jue-mac-cha-ru-yi-dong-ying-pan-bu-xian-shi-ci-pan-gong-ju-xian-shi-wei-zhuang-zai-zhuang-tai-de-wen-ti/"/>
      <url>/2020/07/18/jie-jue-mac-cha-ru-yi-dong-ying-pan-bu-xian-shi-ci-pan-gong-ju-xian-shi-wei-zhuang-zai-zhuang-tai-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>由于手欠，未退出硬盘就直接拔掉了移动硬盘。导致再次插入Mac时，Finder中无法找到移动硬盘。</p><p>通过磁盘工具查看，移动硬盘是未装载的状态。</p><p>本文解决的是本身可以装载的硬盘由于某些原因而装载不上的问题，至于第一次使用就无法装载的问题，大概率是磁盘格式的问题，需要抹掉格式化成Mac支持的格式，此处不做详细说明。</p><p>接下来进入正题。</p><ol><li>打开终端，输入以下命令查看硬盘列表：</li></ol><pre><code>diskutil list</code></pre><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200718084849.png" alt=""></p><p>可以看出，/dev/disk2是移动硬盘</p><p>2.执行修复命令</p><pre><code>sudo  fsck_hfs -fy /dev/disk2</code></pre><p>3.装载硬盘</p><pre><code>sudo diskutil mountDisk /dev/disk2</code></pre><p>输出<code>Volume(s) mounted successfully</code>即代表成功</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac OS搭建自动化测试环境Appium</title>
      <link href="/2020/07/07/mac-os-da-jian-zi-dong-hua-ce-shi-huan-jing-appium/"/>
      <url>/2020/07/07/mac-os-da-jian-zi-dong-hua-ce-shi-huan-jing-appium/</url>
      
        <content type="html"><![CDATA[<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>方法一：官网下载（新手推荐） <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>下载成功后，运行<code>node-vXX.XX.XX.pkg</code>进行安装</p><p>方法二：Mac，如果安装了brew,可通过命令安装<br><code>brew install nodejs</code><br>  如果brew很久没用了，使用上述命令时还可能会先升级brew,比较费时</p><blockquote><p>安装完成后，分别输入 <code>node -v</code> 和 <code>npm -v</code> 验证是否安装成功</p></blockquote><h3 id="安装Appium"><a href="#安装Appium" class="headerlink" title="安装Appium"></a>安装Appium</h3><p>安装桌面版<a href="https://github.com/appium/appium-desktop/releases" target="_blank" rel="noopener">Github</a>，本文以桌面版为主，此时最新的release版本为<a href="https://download.fastgit.org/appium/appium-desktop/releases/download/v1.17.1-1/Appium-mac-1.17.1-1.dmg" target="_blank" rel="noopener">v1.17.1-1</a>,最新的beta版本为<a href="https://download.fastgit.org/appium/appium-desktop/releases/download/v1.18.0-beta.0/Appium-mac-1.18.0-beta.0.dmg" target="_blank" rel="noopener">1.18.0-beta.0</a>,此处我下载的为beta版本，因为release版本在安卓高版本真机进行使用时会报错<code>Security exception: Permission denial: writing to settings</code>，无法使用，详见<a href="https://github.com/appium/appium-desktop/issues/1265" target="_blank" rel="noopener">https://github.com/appium/appium-desktop/issues/1265</a></p><pre><code>npm install -g appium</code></pre><p>如果连接超时，可设置淘宝镜像后再次尝试</p><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre><h3 id="检测环境是否满足"><a href="#检测环境是否满足" class="headerlink" title="检测环境是否满足"></a>检测环境是否满足</h3><p>1.安装appium-doctor</p><pre><code>npm install -g appium-doctor</code></pre><p>2.使用<code>appium-doctor --ios</code>校验ios环境，使用<code>appium-doctor --android</code>校验安卓环境</p><p>本文主讲安卓环境，可能需要进行的配置：</p><ol><li><p>配置JAVA_HOME和ANDROID_HOME</p><p>终端输入<code>/usr/libexec/java_home -V</code>，可查看JDK安装路径</p><p>在AndroidStudio中，可查看Android SDK安装路径</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200708104454.png" alt=""></p><p>输入<code>open ~/.zshrc</code>,增加如下配置，其中具体路径需要替换为你自己的安装路径</p><pre><code>JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-14.0.1.jdk/Contents/HomeCLASSPAHT=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarPATH=$JAVA_HOME/bin:$PATH:export JAVA_HOMEexport CLASSPATHexport PATH</code></pre></li></ol><p>   export ANDROID_HOME=/Users/hansion/Library/Android/sdk<br>   export PATH=${PATH}:${ANDROID_HOME}/tools<br>   export PATH=${PATH}:${ANDROID_HOME}/platform-tools</p><pre><code>2. 安装成功后，点击Start Server按钮![](https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200707173637.png)</code></pre><p>{<br>  “platformName”: “Android”,<br>  “deviceName”: “OPPO PACM00”,<br>  “platformVersion”: “9”,<br>  “appPackage”: “com.xxx.xxx”,<br>  “ignoreHiddenApiPolicyError”: true,<br>  “appActivity”: “com.xxx.xxx.activity.SplashActivity”,<br>  “noReset”: true<br>}</p><p>```</p><p>oppo手机需要在开发者选项中打开如下开关，否则会报错<code>shell settings delete global hidden_api_policy_pre_p_apps' exited with code 255'; Stderr: 'Security exception: Permission denial: writing to settings requires:android.permission.WRITE_SECURE_SETTINGS</code></p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200708103826.png" alt=""></p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200708105317.png" alt=""></p><p>启动成功后，窗口上方的按键功能分别为：</p><ol><li>选择元素，可查看xml布局代码</li><li>滑动操作, 可设置两个点进行滑动操作</li><li>点击操作, 可直接点击控制</li><li>返回键</li><li>刷新当前视图显示</li><li>录制操作生成代码</li><li>寻找元素</li><li>复制当前xml代码</li><li>关闭会话</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Appium,安卓,iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac OS上搭建Flutter开发环境</title>
      <link href="/2020/06/25/mac-os-shang-da-jian-flutter-kai-fa-huan-jing/"/>
      <url>/2020/06/25/mac-os-shang-da-jian-flutter-kai-fa-huan-jing/</url>
      
        <content type="html"><![CDATA[<p>我们主要参考 <a href="https://flutterchina.club/get-started/install/" target="_blank" rel="noopener">Flutter中文网</a> 中的指导</p><h2 id="一、添加镜像"><a href="#一、添加镜像" class="headerlink" title="一、添加镜像"></a>一、添加镜像</h2><p>由于网络的原因，我们需要使用镜像进行下载，我们需要将下方的镜像配置到环境变量中</p><h3 id="配置镜像到环境变量"><a href="#配置镜像到环境变量" class="headerlink" title="配置镜像到环境变量"></a>配置镜像到环境变量</h3><h4 id="macOS-Catalina（10-15）及以上版本"><a href="#macOS-Catalina（10-15）及以上版本" class="headerlink" title="macOS Catalina（10.15）及以上版本"></a>macOS Catalina（10.15）及以上版本</h4><ul><li><p>在终端输入<code>open ~/.zshrc</code></p></li><li><p>如果 提示文件不存在，则执行：<code>vim ~/.zshrc</code>新建文件</p></li><li><p>将下方的镜像粘贴进入profile文件中</p></li><li><p>保存退出</p></li></ul><h4 id="macOS-Catalina（10-15）以下版本"><a href="#macOS-Catalina（10-15）以下版本" class="headerlink" title="macOS Catalina（10.15）以下版本"></a>macOS Catalina（10.15）以下版本</h4><ul><li>在终端中输入 <code>sudo vim /etc/profile</code></li><li>将下方的镜像粘贴进入profile文件中</li><li>在终端输入<code>source /etc/profile</code> 使环境变量生效</li></ul><h4 id="国内镜像"><a href="#国内镜像" class="headerlink" title="国内镜像"></a>国内镜像</h4><p>Flutter官方为中国开发者搭建了临时镜像：</p><pre><code>export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</code></pre><p>如果之后下载有问题，也可以重新配置环境变量，使用上海交通大学的镜像：</p><pre><code>export PUB_HOSTED_URL=https://dart-pub.mirrors.sjtug.sjtu.edu.cnexport FLUTTER_STORAGE_BASE_URL=https://mirrors.sjtug.sjtu.edu.cn</code></pre><h2 id="二、获取Flutter-SDK"><a href="#二、获取Flutter-SDK" class="headerlink" title="二、获取Flutter SDK"></a>二、获取Flutter SDK</h2><p>在合适的位置创建一个文件夹，这里我选择~/flutterDir目录</p><p>在终端输入以下指令，进行clone:</p><pre><code>git clone -b stable https://github.com/flutter/flutter.git</code></pre><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200624161138.png" alt=""></p><p>Clone完成后，配置Flutter SDK到环境变量,流程同配置镜像</p><pre><code>export PATH=~/flutterDir/flutter/bin:$PATH</code></pre><p>配置成功后，在终端输入 <code>flutter doctor</code> 对环境进行检测 ,第一次运行flutter命令时，会下载依赖并编译，所以时间比较长，需要耐心等待</p><p>检测结果如下：</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200624161930.png" alt=""></p><h2 id="三、解决现存问题"><a href="#三、解决现存问题" class="headerlink" title="三、解决现存问题"></a>三、解决现存问题</h2><p>由于我使用AndroidStudio开发，所以在这里只解决掉与Android相关的问题即可</p><ol><li><p>首先解决<code>Android toolchain</code>的问题，根据提示根据提示输入 <code>flutter doctor --android-licenses</code>,然后一直回复y即可</p><p>然后再次输入<code>flutter doctor</code>，我们可以看到该问题已经解决</p></li><li><p>然后解决<code>Android Studio</code>的问题。问题描述说我的AndroidStudio没有安装Flutter插件和Dart插件，我们在AndroidStudio内，搜索安装Flutter插件即可，安装Flutter插件的同时也会将Dart安装上，我们无需再自行安装</p></li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200624162508.png" alt=""></p><p>如果由于网络原因AndroidStudio搜索插件失败，或者安装插件失败，可以进行如下设置（下图为AndroidStudio 4.0）：</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200624162718.png" alt=""></p><p>填入<code>https://plugins.jetbrains.com/</code></p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200624162809.png" alt=""></p><p>安装成功后，点击<code>Restart IDE</code>按钮重启AndroidStudio </p><p>然后再次输入<code>flutter doctor</code>，我们可以看到该问题已经解决</p><h2 id="四、安装完成，创建项目"><a href="#四、安装完成，创建项目" class="headerlink" title="四、安装完成，创建项目"></a>四、安装完成，创建项目</h2><p>接下来，我们就可以使用AndroidStudio创建一个Flutter项目，进行正常的开发了</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200624163204.png" alt=""></p><p>这里选择我们之前clone的Flutter SDK的目录</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200624163520.png" alt=""></p><p>如果最后一直卡在<code>creating flutter project</code>没有反应，则直接强行重启AndroidStudio，然后再open刚刚创建的项目即可。</p><h2 id="五、解决运行时出现的问题"><a href="#五、解决运行时出现的问题" class="headerlink" title="五、解决运行时出现的问题"></a>五、解决运行时出现的问题</h2><p>项目打开后，连上手机直接运行，检测是否有问题，可能遇到的问题如下：</p><ol><li><p>卡在<code>Running Gradle task 'assembleDebug'</code> 或者报错<code>Could not get resource 'xxxxxx'</code> 、<code>Could not find com.android.tools.build:gradle</code>等</p><p>解决：在项目配置文件中添加阿里云镜像</p><pre><code>maven { url 'https://maven.aliyun.com/repository/google/' }maven { url 'https://maven.aliyun.com/repository/jcenter/' }maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }</code></pre><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200624171841.png" alt=""></p></li></ol><p>​        在Flutter配置中也添加阿里云镜像</p><p>​        该文件在<code>Flutter安装目录/packages/flutter_tools/gradle/flutter.gradle</code></p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200624172440.png" alt=""></p><pre><code>需要注意的是,因为Flutter的升级是依赖git.所以在以后Flutter更新版本的时候,即使用 flutter upgrade 命令升级.会提示你在本地的修改还没提交,到时候需要还原这里的改动再升级</code></pre><ol start="2"><li><p>Waiting for another flutter command to release the startup lock. 或者运行时显示 <no device=""></no></p><p>解决方法：打开<code>Flutter安装目录/bin/cache</code> 目录,删除lockfile文件 重启AndroidStudio</p></li></ol><ol start="3"><li>项目中几乎所有代码都报错 main.dart一片红<br>解决方法： 将安卓SDK配置给flutter:flutter config –android-sdk &lt;你SDK的路径&gt;<br>如:flutter config –android-sdk /Users/hansion/Library/Android/sdk</li></ol><ol start="4"><li>安装应用时卡在  Installing build/app/outputs/apk/app.apk…<br>解决方法：重新插拔数据线,并且确认打开了usb调试并授权</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac OS安装JDK与Tomcat</title>
      <link href="/2020/06/13/mac-os-an-zhuang-jdk-yu-tomcat/"/>
      <url>/2020/06/13/mac-os-an-zhuang-jdk-yu-tomcat/</url>
      
        <content type="html"><![CDATA[<h3 id="Mac-OS安装JDK"><a href="#Mac-OS安装JDK" class="headerlink" title="Mac OS安装JDK"></a>Mac OS安装JDK</h3><p><a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">JDK下载地址</a></p><p>找到自己需要的版本，进行点击<code>JDK Download</code></p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200612140853.png" alt=""></p><p>找到<code>macOS Installer</code>对应的下载按钮，点击开始下载</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200612141047.png" alt=""></p><p>下载完成后，运行安装即可</p><h3 id="Mac-OS安装Tomcat"><a href="#Mac-OS安装Tomcat" class="headerlink" title="Mac OS安装Tomcat"></a>Mac OS安装Tomcat</h3><p><a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">Tomcat官方下载地址</a></p><p>点击<code>tar.gz</code>进行下载</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200612151949.png" alt=""></p><p>下载完成后解压即可使用</p><p>为了使用方便，我将解压出的文件夹改名为Tomcat,移动到了Library目录（即下图的<code>资源库</code>目录）中</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200612152344.png" alt=""></p><p>打开终端，输入以下命令:</p><ol><li>进入bin目录</li></ol><pre><code>cd /Library/Tomcat/bin </code></pre><ol start="2"><li>修改权限</li></ol><pre><code>sudo chmod 755 *.sh</code></pre><p>输入密码</p><ol start="3"><li>启动Tomcat</li></ol><pre><code>sudo sh ./startup.sh</code></pre><p>启动成功后如下图所示：</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200612152719.png" alt=""></p><p>在浏览器输入<code>http://localhost:8080/</code>或者<code>http://127.0.0.1:8080/</code>即可打开Tomcat的默认主页</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200612152917.png" alt=""></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="将Tomcat配置到环境变量"><a href="#将Tomcat配置到环境变量" class="headerlink" title="将Tomcat配置到环境变量"></a>将Tomcat配置到环境变量</h4><ul><li><p>在终端输入<code>open ~/.zshrc</code></p></li><li><p>如果 提示文件不存在，则执行：<code>vim ~/.zshrc</code>新建文件</p></li><li><p>将Tomcat的安装路径粘贴进入</p><pre><code>export PATH=$PATH:/Library/Tomcat/bin</code></pre></li><li><p>保存退出</p></li></ul><h4 id="修改默认访问根目录"><a href="#修改默认访问根目录" class="headerlink" title="修改默认访问根目录"></a>修改默认访问根目录</h4><ol><li><p>打开<code>Tomcat安装目录/conf/server.xml</code>,如我的：</p><pre><code>/Library/Tomcat/conf/server.xml</code></pre></li><li><p>找到<code>Host</code>节点，添加如下内容</p><pre><code>&lt;Context path="" docBase="/Users/MySpace/MyWebServer" debug="0" reloadable="true" /&gt; </code></pre><p><code>docBase</code>为访问目录，可以绝对路径也可以相对路径，上述例子为绝对路径</p></li><li><p>重启Tomcat</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android内存调度机制</title>
      <link href="/2020/06/13/android-nei-cun-diao-du-ji-zhi/"/>
      <url>/2020/06/13/android-nei-cun-diao-du-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/aaa1050070637/article/details/92792246" target="_blank" rel="noopener">Android dalvik虚拟机内部机制详解（2）____内存管理原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/86265957" target="_blank" rel="noopener">由浅入深理解Android虚拟机—内存模型，垃圾回收机制是如何实现的？</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android开发高级知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Mac上&quot;adb:command not found&quot;问题</title>
      <link href="/2020/06/04/jie-jue-mac-shang-adb-command-not-found-wen-ti/"/>
      <url>/2020/06/04/jie-jue-mac-shang-adb-command-not-found-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="解决adb-command-not-found"><a href="#解决adb-command-not-found" class="headerlink" title="解决adb: command not found"></a>解决adb: command not found</h3><ol><li><p>打开终端,输入</p><pre><code>cd ~/</code></pre></li></ol><ol start="2"><li><p>(如果没有.bash_profile这个文件，则创建)输入:</p><pre><code>touch .bash_profile</code></pre></li></ol><ol start="3"><li><p>打开.bash_profile文件</p><pre><code>open .bash_profile</code></pre><p>如果有错误，无法编辑，就改用</p><pre><code>vim .bash_profile</code></pre></li></ol><ol start="4"><li><p>添加如下配置</p><pre><code>export ANDROID_HOME=/Users/hansion/Library/Android/sdkexport PATH=${PATH}:${ANDROID_HOME}/toolsexport PATH=${PATH}:${ANDROID_HOME}/platform-tools</code></pre><p>其中<code>/Users/hansion/Library/Android/sdk</code>是Android SDK安装目录，根据自己的安装目录填写</p><p>使用AndroidStudio可快速获取，获取方法见下图：</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200604163652.png" alt=""></p></li></ol><ol start="5"><li>使配置生效,终端输入：</li></ol><pre><code>source .bash_profile</code></pre><h3 id="解决zsh-command-not-found-adb"><a href="#解决zsh-command-not-found-adb" class="headerlink" title="解决zsh: command not found: adb"></a>解决zsh: command not found: adb</h3><p>和上面步骤相同，只是把上面的.bash_profile换成.zshrc，即往.zshrc文件中添加配置，第五步无需执行</p><h3 id="验证问题是否解决"><a href="#验证问题是否解决" class="headerlink" title="验证问题是否解决"></a>验证问题是否解决</h3><ol><li>重启之前提示 command not found的终端</li><li>输入<code>adb</code> ，若无 command not found提示，则代表成功</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具安装与使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Android Studio的build-gradle默认模板</title>
      <link href="/2020/06/04/xiu-gai-android-studio-de-build-gradle-mo-ren-mo-ban/"/>
      <url>/2020/06/04/xiu-gai-android-studio-de-build-gradle-mo-ren-mo-ban/</url>
      
        <content type="html"><![CDATA[<p>此处以Mac OS 为例</p><p>打开Finder，在左侧找到“应用程序” -&gt; Android Studio -&gt; 显示包内容</p><p>具体路径：</p><blockquote><p>/Applications/Android Studio.app/Contents/plugins/android/lib/templates/gradle-projects/NewAndroidProject/root/build.gradle.ftl</p></blockquote><p>打开该文件，即可进行自定义修改，例如我在此模板中增加了国内阿里云镜像</p><pre><code>maven { url 'https://maven.aliyun.com/repository/google/' }maven { url 'https://maven.aliyun.com/repository/jcenter/' }maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }</code></pre><p>修改后内容如下 ：</p><pre><code>// Top-level build file where you can add configuration options common to all sub-projects/modules.buildscript {    &lt;#if generateKotlin&gt;ext.kotlin_version = '${kotlinVersion}'&lt;/#if&gt;    repositories {        maven { url 'https://maven.aliyun.com/repository/google/' }        maven { url 'https://maven.aliyun.com/repository/jcenter/' }        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }        google()        jcenter()        &lt;#if includeKotlinEapRepo!false&gt;maven { url '${kotlinEapRepoUrl}' }&lt;/#if&gt;    }    dependencies {        classpath 'com.android.tools.build:gradle:${gradlePluginVersion}'        &lt;#if generateKotlin&gt;classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"&lt;/#if&gt;        // NOTE: Do not place your application dependencies here; they belong        // in the individual module build.gradle files    }}allprojects {    repositories {        maven { url 'https://maven.aliyun.com/repository/google/' }        maven { url 'https://maven.aliyun.com/repository/jcenter/' }        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }        google()        jcenter()        &lt;#if includeKotlinEapRepo!false&gt;maven { url '${kotlinEapRepoUrl}' }&lt;/#if&gt;    }}task clean(type: Delete) {    delete rootProject.buildDir}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 锦上添花小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac切换Python版本</title>
      <link href="/2020/06/04/mac-qie-huan-python-ban-ben/"/>
      <url>/2020/06/04/mac-qie-huan-python-ban-ben/</url>
      
        <content type="html"><![CDATA[<p>Mac默认自带Python,但版本较低，例如我本机自带的版本为2.7.16</p><p>但我想使用Python3，安装了Python3，怎么才能改成默认使用我们想要的版本呢？</p><p>此处以切换至Python3为例</p><h3 id="获取路径"><a href="#获取路径" class="headerlink" title="获取路径"></a>获取路径</h3><p>首先输入python3,会看到Python3.x的版本</p><p>输入</p><pre><code>import sys</code></pre><p>输入</p><pre><code>print(sys.path)</code></pre><p>会看到路径</p><blockquote><p>[‘’, ‘/usr/local/Cellar/python/3.7.5/Frameworks/Python.framework/Versions/3.7/lib/python37.zip’, ‘/usr/local/Cellar/python/3.7.5/Frameworks/Python.framework/Versions/3.7/lib/python3.7’, ‘/usr/local/Cellar/python/3.7.5/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload’, ‘/Users/hansion/Library/Python/3.7/lib/python/site-packages’, ‘/usr/local/lib/python3.7/site-packages’]</p></blockquote><p>看到版本是3.7</p><p>退出 输入 which python3.7</p><p>会看到路径/usr/local/bin/python3.7</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre><code>open ~/.bash_profile</code></pre><p>增加 <code>alias python="/usr/local/bin/python3.7"</code>保存退出</p><p>使生效<code>source ~/.bash_profile</code></p><p>验证<code>python --version</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac使用brew安装软件缺少权限的问题</title>
      <link href="/2020/06/04/mac-shi-yong-brew-an-zhuang-ruan-jian-que-shao-quan-xian-de-wen-ti/"/>
      <url>/2020/06/04/mac-shi-yong-brew-an-zhuang-ruan-jian-que-shao-quan-xian-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>错误信息如下：</p><blockquote><p>Error: The following directories are not writable by your user:<br>/usr/local/share/man/man8</p><p>You should change the ownership of these directories to your user.<br>  sudo chown -R $(whoami) /usr/local/share/man/man8</p><p>And make sure that your user has write permission.<br>  chmod u+w /usr/local/share/man/man8</p></blockquote><p>解决方法：</p><pre><code>sudo chown -R `whoami`:admin /usr/local/binsudo chown -R `whoami`:admin /usr/local/share</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具安装与使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac OS安装brew和安装wget</title>
      <link href="/2020/06/04/os-an-zhuang-brew-he-an-zhuang-wget/"/>
      <url>/2020/06/04/os-an-zhuang-brew-he-an-zhuang-wget/</url>
      
        <content type="html"><![CDATA[<ul><li>查看brew的版本</li></ul><pre><code>brew --version</code></pre><ul><li>安装brew (brew: command not found)，可能需要科学上网，验证是否可以正常访问，否则无法安装brew</li></ul><pre><code>ruby -e"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</code></pre><p>异常情况：</p><p>如果报错：curl: (7) Failed to connect to raw.githubusercontent.com port 443: Operation timed out，应该是网络有问题，可能需要科学上网，可尝试访问<a href="https://raw.githubusercontent.com/Homebrew/install/master/install，如果可以正常打开，将网页保存为install_brew.rb。然后在终端输入ruby" target="_blank" rel="noopener">https://raw.githubusercontent.com/Homebrew/install/master/install，如果可以正常打开，将网页保存为install_brew.rb。然后在终端输入ruby</a> install_brew.rb，按回车输入密码，即可安装homebrew</p><p>Installation successful! 安装成功后，如果依然提示brew: command not found，向上查看有一个警告，Warning: /usr/local/bin is not in your PATH.</p><p>我们打开环境变量配置文件</p><pre><code>open ~/.bash_profile</code></pre><p>添加：export PATH=/usr/local/bin:$PATH并保存</p><p>更新配置后的环境变量：</p><pre><code>source ~/.bash_profile</code></pre><ul><li>安装wget (sudo: wget: command not found)</li></ul><pre><code>brew install wget</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具安装与使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客等静态网页提交百度和Google谷歌收录</title>
      <link href="/2020/04/13/hexo-bo-ke-deng-jing-tai-wang-ye-ti-jiao-bai-du-he-google-gu-ge-shou-lu/"/>
      <url>/2020/04/13/hexo-bo-ke-deng-jing-tai-wang-ye-ti-jiao-bai-du-he-google-gu-ge-shou-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h2><blockquote><p>站点地图是一个网站所有链接的容器。很多网站的连接层次比较深，爬虫很难抓取到，站点地图可以方便爬虫抓取网站页面，通过抓取网站页面，清晰了解网站的架构，网站地图一般存放在根目录下并命名sitemap，为爬虫指路，增加网站重要内容页面的收录。站点地图就是根据网站的结构、框架、内容，生成的导航网页文件。站点地图对于提高用户体验有好处，它们为网站访问者指明方向，并帮助迷失的访问者找到他们想看的页面。</p><p>-百度百科</p></blockquote><h3 id="生成站点地图"><a href="#生成站点地图" class="headerlink" title="生成站点地图"></a>生成站点地图</h3><ol><li>安装站点地图生成插件</li></ol><pre><code>npm install hexo-generator-baidu-sitemap --savenpm install hexo-generator-sitemap --save</code></pre><ol start="2"><li>在博客根目录的<code>_config.yml</code>中添加自动生成sitemap的配置</li></ol><pre><code>sitemap:  path: sitemap.xmlbaidusitemap:  path: baidusitemap.xml</code></pre><p>同时确认一下该文件里面url对应的是否是接下来要提交的域名</p><ol start="3"><li>生成和部署</li></ol><pre><code>hexo ghexo d</code></pre><p>此时会在<code>public</code>目录下生成两个文件</p><blockquote><p><code>sitemap.xml</code> 用于提交给谷歌</p><p><code>baidusitemap.xml</code> 用于提交给百度</p></blockquote><ol start="4"><li><p>部署成功后，在浏览器打开 <code>你的域名/baidusitemap.xml</code>，成功展示即代表成功</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413210038.png" alt=""></p></li></ol><h2 id="提交到百度站长（百度收录）"><a href="#提交到百度站长（百度收录）" class="headerlink" title="提交到百度站长（百度收录）"></a>提交到百度站长（百度收录）</h2><h3 id="解决百度不爬取Github-Pages的问题"><a href="#解决百度不爬取Github-Pages的问题" class="headerlink" title="解决百度不爬取Github Pages的问题"></a>解决百度不爬取Github Pages的问题</h3><p>如果你的博客部署在Github Pages,百度是不会爬取的，这种情况需要借用其他平台转换一下。</p><p>这里以coding为例</p><ol><li><p>在coding中也创建一个博客项目，取得提交地址</p></li><li><p>在博客根目录的<code>_config.yml</code>中添加coding仓库的配置，注意增加了<code>-</code>号，这样在部署的时候会同时部署到Github 和 coding</p><pre><code>deploy:- type: git  repository: https://github.com/hansionit/hansionit.github.io.git  branch: master- type: git  repository: https://e.coding.net/hansion_it/Blog.git  branch: master</code></pre></li><li><p><code>hexo g -d</code>生成部署一下，会提交代码到coding</p></li><li><p>在coding中开启pages服务，配置自定义域名，在你的域名解析控制台增加两条CNAME，解析线路选择<code>百度</code>，让百度解析到coding的地址</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414122236.png" alt=""></p></li></ol><h3 id="sitemap方式提交"><a href="#sitemap方式提交" class="headerlink" title="sitemap方式提交"></a>sitemap方式提交</h3><ol><li><p>查询是否被收录</p><pre><code>site:你的域名</code></pre></li></ol><p>   <img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413204214.png" alt=""></p><ol start="2"><li><p>若没有收录，则点击<code>提交网址</code>进行提交</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414122915.png" alt=""></p><p>然后打开 <a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度搜索资源平台</a>，进入<code>站点管理</code> -&gt; <code>添加网站</code></p></li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413202939.png" alt=""></p><ol start="3"><li><p>添加完网站后，点击<code>管理站点</code> -&gt; <code>站点属性设置</code></p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413210128.png" alt=""></p></li><li><p>选择链接提交</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413210323.png" alt=""></p></li></ol><ol start="5"><li><p>选择sitemap，输入上文中的sitmap地址，点击提交</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413210527.png" alt=""></p></li></ol><p>如果提示错误，<strong>以下文件已经提交过了，如想重新提交，请先到文件对应工具的站点下删除此文件。</strong></p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413211123.png" alt=""></p><p>可在下方进行勾选删除后重新提交，如果链接一模一样，没有必要删除，点击删除按钮左边的<code>手动更新文件</code>更新一下即可</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413211221.png" alt=""></p><h2 id="主动推送方式提交"><a href="#主动推送方式提交" class="headerlink" title="主动推送方式提交"></a>主动推送方式提交</h2><ol><li><p>安装插件<code>npm install hexo-baidu-url-submit --save</code></p></li><li><p>在博客根目录的<code>config.yml</code>中添加</p><pre><code>baidu_url_submit:  count: 100                 # 提交最新的多少个链接  host:       # 在百度站长平台中添加的域名  token:     # 秘钥  path: baidu_urls.txt</code></pre><p>token在推送的接口中有</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413212519.png" alt=""></p><ol start="3"><li><p>同样是该文件，在<code>deployer</code>中新加一行<code>type: baidu_url_submitter</code>,注意需要为两个<code>type</code>前面添加<code>-</code>符号，结果如：</p><pre><code>deploy:- type: git  repository: https://e.coding.net/hansion_it/Blog.git  branch: master- type: baidu_url_submitter</code></pre></li><li><p>生成部署</p><pre><code>hexo ghexo d</code></pre><p>若最后有输出<code>{"remain":2997,"success":3} INFO  Deploy done: baidu_url_submitter</code>,则代表成功,success的值代表成功多少条，remain的值代表当天剩余可推送条数</p></li></ol></li></ol><h3 id="自动推送方式提交"><a href="#自动推送方式提交" class="headerlink" title="自动推送方式提交"></a>自动推送方式提交</h3><p>Hexo的有些主题已完成了此步骤，可先自行确认是否已经完成，一般完成此步骤的主题的<code>_config.yml</code>文件中会有<code>baidu_push</code>属性，将其设置为<code>true</code></p><p>选择<code>自动推送</code> -&gt; <code>复制代码</code></p><p>没有集成这项功能的，我们可以把代码粘贴到 <code>header.ejs</code> 文件的 <code>&lt;head&gt;</code> 与 <code>&lt;/head&gt;</code> 标签之间</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413211705.png" alt=""></p><h2 id="提交到谷歌搜索（谷歌收录）"><a href="#提交到谷歌搜索（谷歌收录）" class="headerlink" title="提交到谷歌搜索（谷歌收录）"></a>提交到谷歌搜索（谷歌收录）</h2><ol><li><p>进入<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">Google Search Console</a> 登录你的谷歌账号</p></li><li><p>在<code>网址前缀</code>中填写地址</p></li><li><p>下载验证文件</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414124339.png" alt=""></p></li><li><p>存入<strong>主题</strong>的<code>source</code>目录，而不是根目录的source目录，<code>hexo g -d</code>生成部署，然后点击<code>验证</code>，验证成功如下图所示。若提示<code>您的验证文件中的内容不正确。您使用的验证文件是从这里下载的吗?</code>,你需要检查一下目录是否放至正确</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414132047.png" alt=""></p></li><li><p>点击<code>前往资源页面</code>，点击<code>站点地图</code>,输入站点地图的地址，点击<code>提交</code></p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414132514.png" alt=""></p></li><li><p>提交成功后，若显示<code>无法获取</code>，点击<code>无法获取</code>会进行网页获取，再刷新网页即可显示成功</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414132654.png" alt=""></p></li><li><p>可以顺便把百度的sitemap也提交上<code>baidusitemap.xml</code>,成功结果如下：</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414132951.png" alt=""></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeError [ERR_INVALID_ARG_TYPE]/ The &quot;mode&quot; argument must be integer. Received an instance of Object</title>
      <link href="/2020/04/13/git-cao-zuo-bao-cuo/"/>
      <url>/2020/04/13/git-cao-zuo-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>在使用hexo时，提交到git报错</p><blockquote><p>TypeError [ERR_INVALID_ARG_TYPE]: The “mode” argument must be integer. Received an instance of Object</p></blockquote><p>有以下几个原因：</p><ol><li>如果是windows电脑，首先考虑文件名是否包含空格</li><li>nodejs版本太高</li></ol><pre><code>node -v</code></pre><p>输出了 v14.3.0</p><h3 id="node-js-降级（版本回退）"><a href="#node-js-降级（版本回退）" class="headerlink" title="node js 降级（版本回退）"></a>node js 降级（版本回退）</h3><pre><code>npm install -g n</code></pre><p>这里我降级成12.16.3版本</p><pre><code>sudo n 12.16.3</code></pre><p>安装过程中出现错误</p><blockquote><p>dyld: initializer function 0x0 not in mapped image for /usr/local/bin/node</p></blockquote><p>通过Finder前往文件夹/usr/local/n/versions/node,将其内部所有目录删除，重新执行</p><pre><code>sudo n 12.16.3</code></pre><h3 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h3><ol><li>安装成功后，输入<code>node -v</code>查看版本是否为指定的版本</li><li>执行报错前的操作，验证操作是否成功</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具安装与使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git新建仓库提交代码</title>
      <link href="/2020/04/13/git-xin-jian-cang-ku-ti-jiao-dai-ma/"/>
      <url>/2020/04/13/git-xin-jian-cang-ku-ti-jiao-dai-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>在Github/Coding/码云/GitLab等新建项目</p><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><ul><li>在项目根目录输入<code>git init</code>初始化</li><li>添加所有文件 <code>git add .</code></li><li>添加更新说明 <code>git commit -m "First commit"</code></li><li>设置提交地址<code>git remote add origin 第一步中项目的提交地址</code></li><li>提交 <code>git push origin master</code>，第一次提交时，若采用https的方式，可能会提示输入账号密码；若采用ssh的形式，可能需要配置ssh</li></ul><h2 id="可能出现的错误"><a href="#可能出现的错误" class="headerlink" title="可能出现的错误"></a>可能出现的错误</h2><ol><li><p>如果之后在AndroidStudio提交代码时，弹出错误：</p><p>Can’t update: no tracked branch**</p><blockquote><p>No tracked branch configured for branch master.</p><p>To make your branch track a remote branch call, for example,</p><p>git branch –set-upstream master origin/master</p></blockquote></li></ol><p>   <strong>Push rejected</strong></p><p>   ​       Push to origin/master was rejected</p><p>   原因是没有指定分支，解决方法就是按提示</p><pre><code>   git branch --set-upstream master origin/master</code></pre><ol start="2"><li><p>此时可能又出现一个提示：</p><p>The –set-upstream flag is deprecated and will be removed. Consider using –track or –set-upstream-to</p><p>Branch master set up to track remote branch master from origin.</p></li></ol><p>   我们按着提示重新设置后就可以提交了</p><pre><code>   git branch --set-upstream-to  origin/master</code></pre><p>   <img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413195242.png" alt=""></p><ol start="3"><li>如果出现了  failed to push some refs to 问题：</li></ol><p>   error: failed to push some refs to ‘git@github.com:hansionit/H-Downloader.git’</p><p>   hint: Updates were rejected because the remote contains work that you do</p><p>   hint: not have locally. This is usually caused by another repository pushing</p><p>   hint: to the same ref. You may want to first integrate the remote changes</p><p>   hint: (e.g., ‘git pull …’) before pushing again.</p><p>   hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.</p><p>   主要原因是github中的README.md文件不在本地代码目录中</p><p>   先通过如下命令执行代码合并</p><pre><code>   git pull --rebase origin master</code></pre><pre><code>如果无法pull，报错 fatal: refusing to merge unrelated histories,就改用以下命令</code></pre><pre><code>   git pull origin master --allow-unrelated-histories</code></pre><p>   然后可以看到本地代码库中多了README.md文件,再次push</p><pre><code>   git push origin master</code></pre><ol start="4"><li><p>提示：fatal: remote origin already exists</p><p>一般在执行第4步时出现，主要原因是已经添加了远程仓库了，如果需要更换，需要先移除远程仓库</p><pre><code>git remote rm origin</code></pre><p>然后再重新从第4步开始</p><pre><code>git remote add origin 提交地址</code></pre></li></ol><ol start="5"><li><p>提示：</p><p>   warning: LF will be replaced by CRLF in 某文件</p><p>   The file will have its original line endings in your working directory.</p><p>一般是在执行第2步时出现，但不处理也不会影响提交，主要原因是：</p><p>​    CRLF 代表CR(Carriage-Return)、LF(Line-Feed)    回车换行</p><p>​    回车(CR, ASCII 13, \r) 、换行(LF, ASCII 10, \n)    这两个ACSII字符不会在屏幕有任何输出，但在Windows中广泛使用来标识一行的结束，而在Linux/UNIX系统中只有换行符。    也就是说在<strong>windows中的换行符为 CRLF， 而在linux下的换行符为：LF</strong><br>​    使用git来生成工程后，文件中的换行符为LF， 当执行git add .时，系统提示：LF 将被转换成 CRLF</p><p>解决方法：</p><p>​    删除刚刚生成的.git文件</p><pre><code>rm -rf .git </code></pre><p>配置core.autocrlf为false</p><pre><code>git config --global core.autocrlf false</code></pre><p>然后重新重第1步开始 </p></li></ol><p>​    </p><p>​    </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客-Mac/Windows-Coding/Github/码云各种平台完全介绍</title>
      <link href="/2020/04/13/hexo-da-jian-ge-ren-bo-ke-mac-windows-coding-github-ma-yun-ge-chong-ping-tai-wan-quan-jie-shao/"/>
      <url>/2020/04/13/hexo-da-jian-ge-ren-bo-ke-mac-windows-coding-github-ma-yun-ge-chong-ping-tai-wan-quan-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>方法一：官网下载（新手推荐） <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>下载成功后，运行<code>node-vXX.XX.XX.pkg</code>进行安装</p><p>方法二：Mac，如果安装了brew,可通过命令安装<br><code>brew install nodejs</code><br>  如果brew很久没用了，使用上述命令时还可能会先升级brew,比较费时</p><blockquote><p>安装完成后，分别输入 <code>node -v</code> 和 <code>npm -v</code> 验证是否安装成功</p></blockquote><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul><li><p>Windows：管理员身份启动终端，终端输入<code>npm install -g hexo</code> 开始安装</p></li><li><p>Mac：终端输入<code>sudo npm install -g hexo</code> 开始安装</p></li><li><p>进入到想要创建Hexo博客的文件夹，终端输入<code>hexo init xx</code>进行克隆(xx代表创建的目录名称，以下如同)，这样就会在当前目录下，创建一个xx目录，就是你的博客目录</p></li><li><p><code>cd xx</code>进入该目录，执行<code>npm install</code>安装node_modules依赖</p></li><li><p>执行<code>hexo server</code>进行本地测试，根据输出的地址，在浏览其中打开<code>http://localhost:4000</code>，若打开了Hexo的网页即代表成功，如果网页一直在等待中，可能是端口被占用了，通过以下命令更改端口即可<code>hexo server -p 5000</code></p></li><li><p><code>Ctrl + C</code> 关闭该服务</p></li></ul><blockquote><p>至此，环境已经搭建完成，接下来就要设置自己喜欢的网页主题了</p></blockquote><h2 id="配置网页主题"><a href="#配置网页主题" class="headerlink" title="配置网页主题"></a>配置网页主题</h2><h3 id="查找自己喜欢的主题"><a href="#查找自己喜欢的主题" class="headerlink" title="查找自己喜欢的主题"></a>查找自己喜欢的主题</h3><p> <a href="https://www.zhihu.com/question/24422335/answers/updated" target="_blank" rel="noopener">https://www.zhihu.com/question/24422335/answers/updated</a></p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><ul><li><p>选择好主题后，根据主题github上的说明进行下载安装，此处以<code>matery</code>主题为例</p></li><li><p><code>matery</code>主题的github说明地址为 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p></li><li><p>根据提示执行操作</p></li><li><p>进入themes目录 <code>cd themes</code></p></li><li><p>克隆主题 <code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code></p></li></ul><h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>修改 Hexo 根目录下的 _config.yml 的 theme 的值：theme: hexo-theme-matery</p><h2 id="部署到码云或Coding或GitHub"><a href="#部署到码云或Coding或GitHub" class="headerlink" title="部署到码云或Coding或GitHub"></a>部署到码云或Coding或GitHub</h2><ul><li>码云：免费用户不支持自定义域名和自动部署（新用户可免费试用1个月）；不支持CNAME配置；国内访问较快；支持私有仓库</li><li>Coding：免费用户支持CNAME自定义域名和自动部署、私有仓库；需要实名认证；国内访问较慢，不稳定</li><li>GitHub：免费用户支持CNAME自定义域名和自动部署；免费用户不支持私有仓库；国内访问较慢</li></ul><h3 id="在码云或Coding或GitHub新建项目"><a href="#在码云或Coding或GitHub新建项目" class="headerlink" title="在码云或Coding或GitHub新建项目"></a>在码云或Coding或GitHub新建项目</h3><p>修改 Hexo 根目录下的 _config.yml 的deploy,repository设置为你的仓库地址，这里我使用的HTTPS的方式，SSH的方式太复杂，就不使用了，想用SSH的同学查一下用法。</p><pre><code>deploy:  type: git  repository: https://e.coding.net/hansion_it/Blog.git  branch: master</code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li>终端输入 <code>hexo g</code></li><li>终端输入 <code>hexo d</code></li><li>若报错<code>Deployer not found: git</code>，输入 <code>npm install hexo-deployer-git --save</code> </li><li>安装成功后再输入<code>hexo g</code> 和 <code>hexo d</code></li><li>过程中可能会要求输入码云或coding或者github的账号密码，按要求输入即可</li></ul><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><ul><li>GitHub和Coding采用CNAME的形式进行绑定</li><li>码云在部署时选择自定义域名即可</li></ul><h3 id="线上测试"><a href="#线上测试" class="headerlink" title="线上测试"></a>线上测试</h3><ul><li>在浏览器中打开git给你分配的域名或者你自定义的域名，查看是否打开成功，与本地测试时显示相同</li><li>若使用的是码云，可能样式显示存在问题，需要修改Hexo 根目录下的 _config.yml中的url和root分别为你的域名和仓库名，例如：<pre><code>url: http://xxxxx.ioroot: /blog</code></pre></li><li>DNS解析生效需要时间，同时注意浏览器缓存的影响</li></ul><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><ul><li>创建一个文章文件 <code>hexo new "你的文章名称"</code>，会在<code>/source/_posts/</code>目录下创建<code>你的文章名称.md</code>文件</li><li>在该.md文件内书写文章内容，文件内已默认创建了文章属性,若想添加其他属性，可参考主题的使用文档，一般来说都通用，这里以matery主题为例：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md#front-matter-%E9%80%89%E9%A1%B9%E8%AF%A6%E8%A7%A3" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md#front-matter-%E9%80%89%E9%A1%B9%E8%AF%A6%E8%A7%A3</a></li><li>写完文章后，<code>hexo g</code>生成相关文件</li><li><code>hexo s</code>本地预览一下，看看有没有问题</li><li>没有问题，<code>hexo d</code>提交</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Github-Pages自定义域名"><a href="#Github-Pages自定义域名" class="headerlink" title="Github Pages自定义域名"></a>Github Pages自定义域名</h3><ol><li><p>打开域名管理控制台，此处以阿里云为例，增加解析，添加两条CNAME记录，对应ipages域名</p><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414104637.png" alt=""></p></li><li><p>在博客的<code>source</code>目录新建一个文件，名称为<code>CNAME</code>，里面写入要自定义的域名，如<code>www.hansion.win</code>，然后<code>hexo g</code>,<code>hexo d</code>生成部署一下</p></li><li><p>在Github pages设置中，填写自定义域名后保存。</p></li></ol><p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414100644.png" alt=""></p><ol start="4"><li>等待10分钟左右生效</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
